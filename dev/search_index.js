var documenterSearchIndex = {"docs":
[{"location":"PrintLog/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"PrintLog/","page":"Logging","title":"Logging","text":"Modules = [OTRecod]\nPages   = [\"PrintLog.jl\"]","category":"page"},{"location":"plot_functions/#Plots","page":"Plots","title":"Plots","text":"","category":"section"},{"location":"plot_functions/","page":"Plots","title":"Plots","text":"Modules = [OTRecod]\nPages   = [\"plot_functions.jl\"]","category":"page"},{"location":"ot_joint/#Joint","page":"Joint","title":"Joint","text":"","category":"section"},{"location":"ot_joint/","page":"Joint","title":"Joint","text":"Modules = [OTRecod]\nPages   = [\"ot_joint.jl\"]","category":"page"},{"location":"ot_joint/#OTRecod.ot_joint","page":"Joint","title":"OTRecod.ot_joint","text":"ot_joint(inst)\not_joint(inst, maxrelax)\not_joint(inst, maxrelax, lambda_reg)\not_joint(inst, maxrelax, lambda_reg, percent_closest)\not_joint(inst, maxrelax, lambda_reg, percent_closest, norme)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol\n)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol,\n    full_disp\n)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol,\n    full_disp,\n    solver_disp\n)\n\n\nModel where we directly compute the distribution of the outcomes for each individual or for sets of indviduals that similar values of covariates\n\naggregate_tol: quantify how much individuals' covariates must be close for aggregation\nreg_norm: norm1, norm2 or entropy depending on the type of regularization\npercent_closest: percent of closest neighbors taken into consideration in regularization\nlambda_reg: coefficient measuring the importance of the regularization term\nfull_disp: if true, write the transported value of each individual; otherwise, juste write the number of missed transports\nsolver_disp: if false, do not display the outputs of the solver\n\n\n\n\n\n","category":"function"},{"location":"OTRecod/#Main","page":"OTRecod","title":"Main","text":"","category":"section"},{"location":"OTRecod/","page":"OTRecod","title":"OTRecod","text":"Modules = [OTRecod]\nPages   = [\"OTRecod.jl\"]","category":"page"},{"location":"ot_group/#Group","page":"Group","title":"Group","text":"","category":"section"},{"location":"ot_group/","page":"Group","title":"Group","text":"Modules = [OTRecod]\nPages   = [\"ot_group.jl\"]","category":"page"},{"location":"ot_group/#OTRecod.individual_from_group_closest","page":"Group","title":"OTRecod.individual_from_group_closest","text":"individual_from_group_closest(\n    inst,\n    jointprobaA,\n    jointprobaB\n)\nindividual_from_group_closest(\n    inst,\n    jointprobaA,\n    jointprobaB,\n    percent_closest\n)\n\n\nSequentially assign the modality of the individuals to that of the closest neighbor in the other base until the joint probability values are met\n\n\n\n\n\n","category":"function"},{"location":"ot_group/#OTRecod.individual_from_group_optimal","page":"Group","title":"OTRecod.individual_from_group_optimal","text":"individual_from_group_optimal(\n    inst,\n    jointprobaA,\n    jointprobaB\n)\nindividual_from_group_optimal(\n    inst,\n    jointprobaA,\n    jointprobaB,\n    percent_closest\n)\n\n\nSolve an optimization problem to get the individual transport that minimizes total distance while satisfying the joint probability computed by the model by group\n\n\n\n\n\n","category":"function"},{"location":"ot_group/#OTRecod.ot_group","page":"Group","title":"OTRecod.ot_group","text":"ot_group(inst)\not_group(inst, percent_closest)\not_group(inst, percent_closest, maxrelax)\not_group(inst, percent_closest, maxrelax, indiv_method)\not_group(\n    inst,\n    percent_closest,\n    maxrelax,\n    indiv_method,\n    full_disp\n)\not_group(\n    inst,\n    percent_closest,\n    maxrelax,\n    indiv_method,\n    full_disp,\n    solver_disp\n)\n\n\nModel of group transport\n\npercent_closest: percent of closest neighbors taken in the computation of the costs\nmaxrelax: maximum percentage of deviation from expected probability masses\nindiv_method: specifies the method used to get individual transport from group joint probabilities\nfull_disp: if true, write the transported value of each individual;     otherwise, juste write the number of missed transports\nsolver_disp: if false, do not display the outputs of the solver\n\n\n\n\n\n","category":"function"},{"location":"#OTRecod.jl","page":"Documentation","title":"OTRecod.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Documentation for OTRecod.jl","category":"page"},{"location":"#Installation","page":"Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"In a Julia session switch to pkg> mode to add NPSMC:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia>] # switch to pkg> mode\npkg> add https://github.com/otrecoding/OTRecod.jl","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Alternatively, you can achieve the above using the Pkg API:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using Pkg\njulia> pkg\"add https://github.com/otrecoding/OTRecod.jl\"","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"When finished, make sure that you're back to the Julian prompt (julia>) and bring OTRecod into scope:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using OTRecod","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"You can test the package with","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia>] # switch to pkg> mode\npkg> test OTRecod","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"To run an example from a dataset","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"run_directory","category":"page"},{"location":"#OTRecod.run_directory","page":"Documentation","title":"OTRecod.run_directory","text":"run_directory(path, method)\nrun_directory(path, method, outname)\nrun_directory(path, method, outname, maxrelax)\nrun_directory(path, method, outname, maxrelax, lambda_reg)\nrun_directory(\n    path,\n    method,\n    outname,\n    maxrelax,\n    lambda_reg,\n    nbfiles\n)\nrun_directory(\n    path,\n    method,\n    outname,\n    maxrelax,\n    lambda_reg,\n    nbfiles,\n    norme\n)\nrun_directory(\n    path,\n    method,\n    outname,\n    maxrelax,\n    lambda_reg,\n    nbfiles,\n    norme,\n    percent_closest\n)\nrun_directory(\n    path,\n    method,\n    outname,\n    maxrelax,\n    lambda_reg,\n    nbfiles,\n    norme,\n    percent_closest,\n    observed\n)\n\n\nRun one given method on a given number of data files of a given directory  The data files must be the only files with extension \".txt\" in the directory\n\npath   : name of the directory\nmethod : :group or :joint\nmaxrelax: maximum percentage of deviation from expected probability masses\nlambda_reg: coefficient measuring the importance of the regularization term\nnbfiles: number of files considered, 0 if all the data files are tested\nnorme  : 0, 1 or 2, norm used for distances in the space of covariates\npercent_closest: percent of closest neighbors taken in the computation of the costs (both distance and regularization related)\nobserved: if nonempty, list of indices of the observed covariates; this allows to exclude some latent variables.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using OTRecod","category":"page"},{"location":"#Instance","page":"Documentation","title":"Instance","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Instance","category":"page"},{"location":"#OTRecod.Instance","page":"Documentation","title":"OTRecod.Instance","text":"struct Instance\n\nDefinition and initialization of an Instance structure\n\ndatafile : file name\nnorme    : ( 1 : Cityblock, 2 : Euclidean, 3 : Hamming )\nindXA    : indexes of subjects of A with given X value\nindXB    : indexes of subjects of B with given X value\n\n\n\n\n\n","category":"type"},{"location":"#Solution","page":"Documentation","title":"Solution","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Solution","category":"page"},{"location":"#OTRecod.Solution","page":"Documentation","title":"OTRecod.Solution","text":"mutable struct Solution\n\ntsolve       : solution time\njointYZA     : joint distribution of Y and Z in A\njointYZB     : joint distribution of Y and Z in B\nestimatorZA  : estimator of probability of Z for individuals in base A\nestimatorYB  : estimator of probability of Y for individuals in base B\n\n\n\n\n\n","category":"type"},{"location":"utils/#Helper-functions","page":"Utilities","title":"Helper functions","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"Modules = [OTRecod]\nPages   = [\"utils.jl\"]","category":"page"}]
}
